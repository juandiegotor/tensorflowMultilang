var url = "exitosSinNulos.csv";

var request = new XMLHttpRequest();
request.open("GET", url, false);
request.send(null);

var datos = new Array();
var clases = new Array();
var jsonObject = request.responseText.split(/\r?\n|\r/);
var columnas;
var x;
for (var i = 0; i < jsonObject.length; i++) {
    if (i==0) {
        columnas=jsonObject[i].split(',');
    }else{
        x=jsonObject[i].split(',');
        datos.push(x);
        clases.push(x[x.length-1]);

        datos[datos.length-1].splice(datos[datos.length-1].length-1,1);
    }

}
// Retrived data from csv file content
datos.splice(datos.length-1,1);
clases.splice(clases.length-1,1);
// const xs=tf.tensor(datos);
// const ys=tf.tensor(clases);

const model=tf.sequential();

const hidden = tf.layers.dense({
    units: 20,
    inputShape:[22],
    activation: 'sigmoid'
});
const output = tf.layers.dense({
    units: 2,
    activation: 'sigmoid'
});

model.add(hidden);
model.add(output);


//Compilo el modelo
const configCompile={
    optimizer: tf.train.sgd(0.1), //learning rate
    loss: tf.losses.meanSquaredError, //error
    metrics: ['accuracy'],
}
model.compile(configCompile);
    x=[
        [0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92],
        [0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3],
        [0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74],
    ];
    const xs=tf.tensor2d([
        [0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92],
        [0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3],
        [0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74],
        [0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92],
        [0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3],
        [0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74],
        [0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92],
        [0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3],
        [0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74],
        [0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92],
        [0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3],
        [0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74],
        [0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92],
        [0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3],
        [0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74],
        [0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92],
        [0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3],
        [0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74],
        [0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92,0.25,0.92],
        [0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3,0.12,0.3],
        [0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74,0.4,0.74],
    ])

    const ys=tf.tensor2d([
        [0.1,0.1],
        [0.4,0.05],
        [0.2,0.9],
    ])

    const configModel={
        epochs:100,
    }

// model.fit(xs,ys,configModel).then((response)=>console.log(response.history.loss[0]));

async function train(){


    const h=await model.fit(xs,ys,configModel);
    console.log(h.history.loss[0]);
}
train().then(()=>console.log('Training complete'));

// const inputs=tf.tensor2d([[0.25,0.92]])

// let outputs=model.predict(inputs);
// outputs.print();